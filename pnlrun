#!/usr/bin/env python
import sys
from plumbum import local, FG, cli
import yaml
import pipelinelib
from pipelinelib import logfmt, Src, update
from nodes import StrctXc, DwiXc, FsInDwiDirect, FreeSurferUsingMask, T1wMaskMabs, DwiMaskHcpBet, DwiEd

BTHASH = '41353e8'
TQHASH = 'a8e354e'
UKFHASH = '999f14d'


def makePipelines(caseid, pathsDict):
    """Make one or more pipelines, the default is PNL's standard pipeline. """

    pipelines = []
    # for ukfparams in [ukfparamsDefault, ukfparamsCustom]:
    # for bthash in [BTHASH, 'e13c873']:
    for i in range(1):
        pipeline = {}
        pipeline['t1'] = Src(caseid, 't1')
        pipeline['dwi'] = Src(caseid, 'dwi')

        pipeline['t1xc'] = StrctXc(caseid, pipeline['t1'])
        pipeline['dwixc'] = DwiXc(caseid, pipeline['dwi'], BTHASH)
        pipeline['dwied'] = DwiEd(caseid, pipeline['dwixc'], BTHASH)

        pipeline['dwimask'] = Src(
            caseid, 'dwimask') if pathsDict.get('dwimask') else DwiMaskHcpBet(
                caseid, pipeline['dwied'])

        pipeline['t1mask'] = Src(
            caseid, 't1mask') if pathsDict.get('t1mask') else T1wMaskMabs(
                caseid, pipeline['t1xc'], BTHASH)

        pipeline['fs'] = FreeSurferUsingMask(caseid, pipeline['t1xc'], pipeline['t1mask'])
        pipeline['fsindwi'] = FsInDwiDirect(
            caseid, pipeline['fs'], pipeline['dwied'], pipeline['dwimask'],
            BTHASH)

        pipelines.append(pipeline)

    return pipelines


class App(cli.Application):
    """Runs the PNL pipeline using the input paths in _paths.yml (Run 'pnlmake'
    first)"""

    want = cli.SwitchAttr(
        ['-w', '--want'], default='fsindwi', help='target node')

    def main(self, *caseids):

        if not caseids:
            print('Specify caseid(s) on command line, e.g. ./pnlrun 001')
            sys.exit(1)
        if not local.path('_paths.yml').exists():
            print('Missing _paths.yml, run pnlmake first')
            sys.exit(1)

        with open('_paths.yml', 'r') as f:
            pipelinelib.INPUT_PATH_PATTERNS = yaml.load(f)

        for caseid in caseids:
            pipelines = makePipelines(caseid, pathsDict)
            for pipeline in pipelines:
                update(pipeline[self.want])


if __name__ == '__main__':
    App.run()

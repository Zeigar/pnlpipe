#!/usr/bin/env python
import sys
import yaml
from plumbum import local, cli


def readPathsYml(pathsDir):
    pathsDict = {}
    with open(pathsDir / 'paths.yml', 'r') as f:
        relativePaths = yaml.load(f)
        for key, val in relativePaths.items():
            pathsDict[key] = str(pathsDir / val)
    return pathsDict


class App(cli.Application):
    """ Configures pipeline"""

    pathsDir = cli.SwitchAttr(
        ['-i'],
        cli.ExistingDirectory,
        excludes=['--t1', '--t2', '--dwi', '--dwimask'],
        help='Input data directory with a paths.yml',
        mandatory=False)

    t1 = cli.SwitchAttr(
        ['--t1'], excludes=['-i'], help='path or key in paths.yml')
    t2 = cli.SwitchAttr(
        ['--t2'], excludes=['-i'], help='path or key in paths.yml')
    dwi = cli.SwitchAttr(
        ['--dwi'], excludes=['-i'], help='path or key in paths.yml')
    dwimask = cli.SwitchAttr(
        ['--dwimask'], excludes=['-i'], help="path or a key in paths.yml")

    def main(self):
        if self.pathsDir:
            pathsDict = readPathsYml(self.pathsDir)
        else:
            pathsDict = {
                't1': self.t1,
                't2': self.t2,
                'dwi': self.dwi,
                'dwimask': self.dwimask
            }

        with open('_paths.yml', 'w') as f:
            yaml.dump(pathsDict, f, default_flow_style=False)

        print("Made '_paths.yml'")


if __name__ == '__main__':
    App.run()

#!/usr/bin/env python
import sys
import yaml
from plumbum import local, cli


def readPathsYml(pathsDir):
    pathsDict = {}
    with open(pathsDir / 'paths.yml', 'r') as f:
        try:
            relativePaths = yaml.load(f)
        except yaml.parser.ParserError as err:
            print(err)
            print('Error parsing {}, is there a typo? (And are the path templates in quotes?)'.format(pathsDir/'paths.yml'))
            sys.exit(1)
    return relativePaths



class App(cli.Application):
    """
    Makes _paths.yml, which is a dictionary of template paths to your input
    data (typically a t1, dwi, and a dwi mask). The paths must have the
    following format: /data/pnl/INTRuST/{case}/diff/{case}-dwi-Ed.nhdr

    """

    pathsDir = cli.SwitchAttr(
        ['-i'],
        cli.ExistingDirectory,
        excludes=['--t1', '--t2', '--dwi', '--dwimask'],
        help='Input data directory with a paths.yml',
        mandatory=False)

    t1 = cli.SwitchAttr(
        ['--t1'], excludes=['-i'], help='path')
    t2 = cli.SwitchAttr(
        ['--t2'], excludes=['-i'], help='path')
    dwi = cli.SwitchAttr(
        ['--dwi'], excludes=['-i'], help='path')
    dwimask = cli.SwitchAttr(
        ['--dwimask'], excludes=['-i'], help='path')
    caseid = cli.SwitchAttr(
        ['-s', '--subjid'], excludes=['-i'], help='subject id/caseid in t1,t2,dwi,dwimask paths')

    def main(self):
        if self.pathsDir:
            relativePaths = readPathsYml(self.pathsDir)
            pathsDict = {}
            for key, val in relativePaths.items():
                if key == 'caseid':
                    pathsDict[key] = val
                else:
                    pathsDict[key] = str(self.pathsDir / val)
        else:
            pathsDict = {
                't1': self.t1,
                't2': self.t2,
                'dwi': self.dwi,
                'dwimask': self.dwimask,
                'caseid': self.caseid
            }

        # Check paths exist
        allexist = True
        for key, path in pathsDict.items():
            print('{}: {}'. format(key, path))
            if key == 'caseid':
                continue
            if not local.path(path).exists():
                allexist = False
                print("'{}' does not exist, is that right?".format(path))
        if allexist:
            print('All paths exist')
        else:
            print("Some paths in _paths.yml don't exist for the given caseid, so 'pnlrun' may fail to run.")

        with open('_paths.yml', 'w') as f:
            yaml.dump(pathsDict, f, default_flow_style=False)
        print("Made '_paths.yml'")

        if allexist:
            print("Now run './pnlrun'")


if __name__ == '__main__':
    App.run()

#!/usr/bin/env python
try:
    from plumbum import local, FG, cli
except ImportError:
    print('Couldn\'t import plumbum')
    print(
        'Did you forget to load python environment? (e.g. source activate pnlpipe)')
import pnlpipe_software
import pnlpipe_pipelines
import pnlpipe_cli.pipecmd
import pnlpipe_cli.readparams as readparams
import pnlpipe_cli.cmd.install
import logging
import pnlpipe_config

class App(cli.Application):
    verbose = cli.Flag(['-d', '--debug'], help='Turn on debug logging')

    def main(self, *args):
        if args:
            print("Unknown command {0!r}".format(args[0]))
            return 1
        if not self.nested_command:
            print("No command given")
            return 1  # error exit code

        if self.verbose:
            loglevel = logging.DEBUG
        elif hasattr(pnlpipe_config, 'LOG_LEVEL'):
            loglevel = pnlpipe_config.LOG_LEVEL
        else:
            loglevel = logging.INFO
        logging.basicConfig(
            level=loglevel,
            format='%(asctime)s - %(levelname)5s - %(name)s:  %(message)s',
            datefmt="%Y-%m-%d %H:%M")
        logger = logging.getLogger(__name__)


def classSoftwareFactory(name,
                         makeFn,
                         BaseClass=pnlpipe_cli.cmd.install.SoftwareCommand):
    def wrapFunction(self, *args, **kwargs):
        return make(*args, **kwargs)

    newclass = type(name, (BaseClass, ), {"make": wrapFunction})
    return newclass



def makeSubcommandClass(pipeline_name,
                 make_pipelineFn,
                 statusFn,
                 default_target,
                 BaseClass=pnlpipe_cli.pipecmd.PipelineSubcommand):
    def wrappedMakePipeline(self, *args, **kwargs):
        return make_pipelineFn(*args, **kwargs)

    params_file = readparams.params_file(pipeline_name)
    newclass = type(pipeline_name, (BaseClass, ), {"pipeline_name": pipeline_name,
                                          "make_pipeline": wrappedMakePipeline,
                                          "make_pipeline_orig": make_pipelineFn,
                                          "params_file": params_file,
                                          "default_target": default_target})

    if statusFn:

        def wrappedStatus(self, *args, **kwargs):
            return statusFn(*args, **kwargs)

        setattr(newclass, 'status', wrappedStatus)

    return newclass


if __name__ == '__main__':
    import pnlpipe_cli.cmd.export
    import pnlpipe_cli.pipecmd.init
    import pnlpipe_cli.pipecmd.setup
    import pnlpipe_cli.pipecmd.run
    import pnlpipe_cli.pipecmd.status
    import pnlpipe_cli.pipecmd.symlink
    import pnlpipe_cli.pipecmd.ls
    import pnlpipe_cli.pipecmd.tags
    import pnlpipe_cli.pipecmd.info

    App.subcommand("install", pnlpipe_cli.cmd.install.SoftwareCommand)
    App.subcommand("export", pnlpipe_cli.cmd.export.Export)

    for pipeline_name, pipeline_module in pnlpipe_pipelines.modules():
        statusFn = getattr(pipeline_module, 'status', None)
        default_target = getattr(pipeline_module, 'DEFAULT_TARGET', None)
        SubcommandClass = makeSubcommandClass(pipeline_name, pipeline_module.make_pipeline, statusFn,
                                              default_target)
        App.subcommand(pipeline_name, SubcommandClass)
        SubcommandClass.subcommand("run",     pnlpipe_cli.pipecmd.run.Run)
        SubcommandClass.subcommand("setup",    pnlpipe_cli.pipecmd.setup.Setup)
        SubcommandClass.subcommand("init",    pnlpipe_cli.pipecmd.init.Init)
        SubcommandClass.subcommand("symlink", pnlpipe_cli.pipecmd.symlink.SymLink)
        SubcommandClass.subcommand("status",  pnlpipe_cli.pipecmd.status.Status)
        SubcommandClass.subcommand("ls",      pnlpipe_cli.pipecmd.ls.Ls)
        SubcommandClass.subcommand("tags",    pnlpipe_cli.pipecmd.tags.Tags)
        SubcommandClass.subcommand("info",    pnlpipe_cli.pipecmd.info.Info)

    App.run()

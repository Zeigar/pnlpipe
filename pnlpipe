#!/usr/bin/env python
try:
    from plumbum import local, FG, cli
except ImportError:
    print('Couldn\'t import plumbum')
    print(
        'Did you forget to load python environment? (e.g. source activate pnlpipe)')
import pnlpipe_software
import pnlpipe_pipelines
import pnlpipe_lib.cli.pipecmd
import pnlpipe_lib.cli.cmd.install
import logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)5s - %(name)s:  %(message)s',
    datefmt="%Y-%m-%d %H:%M")
logger = logging.getLogger(__name__)


class App(cli.Application):
    def main(self, *args):
        if args:
            print("Unknown command {0!r}".format(args[0]))
            return 1
        if not self.nested_command:
            print("No command given")
            return 1  # error exit code


def classSoftwareFactory(name,
                         makeFn,
                         BaseClass=pnlpipe_lib.cli.cmd.install.SoftwareCommand):
    def wrapFunction(self, *args, **kwargs):
        return make(*args, **kwargs)

    newclass = type(name, (BaseClass, ), {"make": wrapFunction})
    return newclass



def classFactory(name,
                 makePipelineFn,
                 statusFn,
                 defaultTarget,
                 BaseClass=pnlpipe_lib.cli.pipecmd.PipelineSubcommand):
    def wrappedMakePipeline(self, *args, **kwargs):
        return makePipelineFn(*args, **kwargs)

    paramsFile = local.path(name + '.params')
    newclass = type(name, (BaseClass, ), {"name": name,
                                          "makePipeline": wrappedMakePipeline,
                                          "makePipeline_orig": makePipelineFn,
                                          "paramsFile": paramsFile,
                                          "defaultTarget": defaultTarget})

    if statusFn:

        def wrappedStatus(self, *args, **kwargs):
            return statusFn(*args, **kwargs)

        setattr(newclass, 'status', wrappedStatus)
    return newclass


if __name__ == '__main__':
    import pnlpipe_lib.cli.cmd.export
    import pnlpipe_lib.cli.pipecmd.init
    import pnlpipe_lib.cli.pipecmd.make
    import pnlpipe_lib.cli.pipecmd.run
    import pnlpipe_lib.cli.pipecmd.status
    import pnlpipe_lib.cli.pipecmd.symlink
    import pnlpipe_lib.cli.pipecmd.ls
    import pnlpipe_lib.cli.pipecmd.missing
    import pnlpipe_lib.cli.pipecmd.keys

    App.subcommand("install", pnlpipe_lib.cli.cmd.install.SoftwareCommand)
    App.subcommand("export", pnlpipe_lib.cli.cmd.export.Export)

    for m in pnlpipe_pipelines.getModules():
        name = m.__name__[9:]
        statusFn = getattr(m, 'status', None)
        defaultTarget = getattr(m, 'DEFAULT_TARGET', None)
        SubcommandClass = classFactory(name, m.makePipeline, statusFn,
                                       defaultTarget)
        App.subcommand(name, SubcommandClass)
        SubcommandClass.subcommand("run",     pnlpipe_lib.cli.pipecmd.run.Run)
        SubcommandClass.subcommand("make",    pnlpipe_lib.cli.pipecmd.make.Make)
        SubcommandClass.subcommand("init",    pnlpipe_lib.cli.pipecmd.init.Init)
        SubcommandClass.subcommand("symlink", pnlpipe_lib.cli.pipecmd.symlink.SymLink)
        SubcommandClass.subcommand("status",  pnlpipe_lib.cli.pipecmd.status.Status)
        SubcommandClass.subcommand("ls",      pnlpipe_lib.cli.pipecmd.ls.Ls)
        SubcommandClass.subcommand("missing", pnlpipe_lib.cli.pipecmd.missing.Missing)
        SubcommandClass.subcommand("keys",    pnlpipe_lib.cli.pipecmd.keys.Keys)

    App.run()

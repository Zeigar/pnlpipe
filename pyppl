#!/usr/bin/env python
try:
    from plumbum import local, FG, cli
except ImportError:
    print('Couldn\'t import plumbum')
    print('Did you forget to load python environment? (e.g. source activate pyppl)')
import sys
import yaml
import pipelinelib
from pipelinelib import logfmt, Src, update
from nodes import StrctXc, DwiXc, FsInDwiDirect, FreeSurferUsingMask, T1wMaskMabs, DwiMaskHcpBet, DwiEd, UkfDefault, Wmql, TractMeasures, T2wMaskRigid, DwiEpi
import nodes

def assertKeys(pipelineName, keys):
    absentKeys = [k for k in keys if not pipelinelib.INPUT_PATHS.get(k)]
    if absentKeys:
        for key in absentKeys:
            print("{} requires '{}' set in _inputPaths.yml".format(pipelineName, key))
        sys.exit(1)

def makeStandardPipeline(caseid,
                         bthash,
                         ukfhash,
                         tqhash,
                         dwiKey='dwi',
                         t1Key='t1',
                         dwimaskKey='dwimask',
                         ukfparams=None):
    """Makes the PNL's standard pipeline. """

    assertKeys("Standard PNL Pipeline", [dwiKey, t1Key])

    pipeline = {'BTHASH': bthash}
    pipeline['t1'] = Src(caseid, t1Key)
    pipeline['dwi'] = Src(caseid, dwiKey)

    pipeline['t1xc'] = StrctXc(caseid, pipeline['t1'])
    # run DwiXc first as it's able to convert a DWI nifti to nrrd
    pipeline['dwixc'] = DwiXc(caseid, pipeline['dwi'])
    pipeline['dwied'] = DwiEd(caseid, pipeline['dwixc'])

    pipeline['dwimask'] = Src(
        caseid, dwimaskKey) if pipelinelib.INPUT_PATHS.get(dwimaskKey) else DwiMaskHcpBet(
            caseid, pipeline['dwied'])

    pipeline['t1mask'] = Src(
        caseid, 't1mask') if pipelinelib.INPUT_PATHS.get('t1mask') else T1wMaskMabs(
            caseid, pipeline['t1xc'])

    pipeline['fs'] = FreeSurferUsingMask(caseid, pipeline['t1xc'],
                                         pipeline['t1mask'])
    pipeline['fsindwi'] = FsInDwiDirect(caseid, pipeline['fs'],
                                        pipeline['dwied'], pipeline['dwimask'])

    pipeline['ukf'] = UkfDefault(caseid, pipeline['dwied'],
                                 pipeline['dwimask'], ukfhash)

    pipeline['wmql'] = Wmql(caseid, pipeline['fsindwi'], pipeline['ukf'],
                            tqhash)
    pipeline['tractmeasures'] = TractMeasures(caseid, pipeline['wmql'])
    return pipeline


def makeStandardEpiPipeline(caseid,
                            bthash,
                            ukfhash,
                            tqhash,
                            dwiKey='dwi',
                            t1Key='t1',
                            dwimaskKey='dwimask',
                            t2Key='t2'):
    """Makes the PNL's standard pipeline with EPI distortion correction. """

    assertKeys("EPI correction pipeline", [dwiKey,t1Key,t2Key])

    pipeline = {'BTHASH': bthash}
    pipeline['t1'] = Src(caseid, t1Key)
    pipeline['dwi'] = Src(caseid, dwiKey)
    pipeline['t2'] = Src(caseid, 't2')

    pipeline['t1xc'] = StrctXc(caseid, pipeline['t1'])
    pipeline['t2xc'] = StrctXc(caseid, pipeline['t2'])
    # run DwiXc first as it's able to convert a DWI nifti to nrrd
    pipeline['dwixc'] = DwiXc(caseid, pipeline['dwi'])
    pipeline['dwied'] = DwiEd(caseid, pipeline['dwixc'])

    pipeline['dwimask'] = Src(
        caseid, dwimaskKey) if pipelinelib.INPUT_PATHS.get(dwimaskKey) else DwiMaskHcpBet(
            caseid, pipeline['dwied'])

    pipeline['t1mask'] = Src(
        caseid, 't1mask') if pipelinelib.INPUT_PATHS.get('t1mask') else T1wMaskMabs(
            caseid, pipeline['t1xc'])

    pipeline['t2mask'] = Src(
        caseid, 't2mask') if pipelinelib.INPUT_PATHS.get('t2mask') else T2wMaskRigid(
            caseid, pipeline['t2xc'], pipeline['t1xc'], pipeline['t1mask'])

    pipeline['dwiepi'] = DwiEpi(caseid, pipeline['dwied'], pipeline['dwimask'],
                                pipeline['t2xc'], pipeline['t2mask'])

    pipeline['fs'] = FreeSurferUsingMask(caseid, pipeline['t1xc'],
                                         pipeline['t1mask'])
    pipeline['fsindwi'] = FsInDwiDirect(caseid, pipeline['fs'],
                                        pipeline['dwied'], pipeline['dwimask'])

    pipeline['ukf'] = UkfDefault(caseid, pipeline['dwied'],
                                 pipeline['dwimask'], ukfhash)

    pipeline['wmql'] = Wmql(caseid, pipeline['fsindwi'], pipeline['ukf'],
                            tqhash)
    pipeline['tractmeasures'] = TractMeasures(caseid, pipeline['wmql'])
    return pipeline


def makeGeneratedPathsYml(caseid, pipelines):
    paths = {'caseid': caseid}
    for idx, pipeline in enumerate(pipelines):
        for key, node in pipeline.items():
            if len(pipelines) == 1:
                paths[key] = str(node.path())
            else:
                paths[key + str(idx)] = str(node.path())
    return paths


def writeGeneratedPathsYml(caseid, pipelines):
    print('Make {}/paths.yml'.format(pipelinelib.OUTDIR))
    generatedPathsDict = makeGeneratedPathsYml(caseid, pipelines)
    with open('_data/paths.yml', 'w') as f:
        yaml.dump(generatedPathsDict, f, default_flow_style=False)
    print('Made {}/paths.yml'.format(pipelinelib.OUTDIR))
    print()


class App(cli.Application):
    """Runs the PNL pipeline using the input paths in _inputPaths.yml"""
    want = cli.SwitchAttr(
        ['-w', '--want'], default='tractmeasures', help='target node')
    writeGeneratedPathsYml = cli.Flag('--writePaths', default=False)

    def main(self, *args):
        if args:
            print("Unknown command {0!r}".format(args[0]))
            return 1
        if not self.nested_command:
            print("No command given")
            return 1  # error exit code


def readAndSetInputPaths():
    if not local.path('_inputPaths.yml').exists():
        print(
            "Missing _inputPaths.yml, first make one using 'pnlscripts/makepathsyml.py' or a text editor")
        sys.exit(1)
    with open('_inputPaths.yml', 'r') as f:
        pipelinelib.INPUT_PATHS = yaml.load(f)
    # local.path(pipelinelib.OUTDIR).mkdir()

def run(caseids, pipelines):
    for caseid in self.caseids:
        for pipeline in self.pipelines:
            nodes.BTHASH = pipeline['BTHASH']
            update(pipeline[self.parent.want])
            writeGeneratedPathsYml(caseid, [pipeline])

class PypplSubcommand(cli.Application):
    def main(self, *caseids):
        readAndSetInputPaths() # reads _inputPaths.yml into pipelinelib.INPUT_PATHS
        caseids = caseids if caseids else [pipelinelib.INPUT_PATHS.get(
            'caseid')]

        if self.parent.writeGeneratedPathsYml:
            writeGeneratedPathsYml(caseids[0], self.pipelines)
            return

        for caseid in caseids:
            for pipeline in self.pipelines(caseid):
                nodes.BTHASH = pipeline['BTHASH']
                update(pipeline[self.parent.want])


@App.subcommand("pnl")
class Pnl(PypplSubcommand):
    """ Standard PNL pipeline. """
    epi = cli.Flag(
        '--epi', help="Turn on EPI distortion correction", default=False)
    bthash = cli.SwitchAttr(['--bthash'], help='BRAINSTools commit hash', mandatory=True)
    ukfhash = cli.SwitchAttr(['--ukfhash'], help='UKFTractography commit hash', mandatory=True)
    tqhash = cli.SwitchAttr(['--tqhash'], help='tract_querier commit hash', mandatory=True)

    def pipelines(self, caseid):
        if self.epi:
            pipeline = makeStandardEpiPipeline(caseid, self.bthash,
                                                   self.ukfhash, self.tqhash)
        else:
            pipeline = makeStandardPipeline(caseid, self.bthash,
                                                self.ukfhash, self.tqhash)
        return [pipeline]


@App.subcommand("custom")
class Custom(PypplSubcommand):
    """User's custom pipeline"""

    def pipelines(self, caseid):
        print('Uncomment and edit code below to make a custom pipeline')
        return []
        # Examples:
        # bthash = '41353e8'
        # tqhash = 'a8e354e'
        # ukfhash = '999f14d'
        # return [makeStandardPipeline(caseid, bthash, ukfhash, tqhash) for dwiKey in ['dwihcp', 'dwibuddi']
        # return [makeStandardPipeline(caseid, bthash, ukfhash, tqhash) for tqhash in ['a8e354e', 'e13c873']
        # return [makeStandardPipeline(caseid, bthash, ukfhash, tqhash, ukfparams) for ukfparams in [ukfparamsDefault, ukfparamsCustom]


if __name__ == '__main__':
    App.run()

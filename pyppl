#!/usr/bin/env python
import sys
from plumbum import local, FG, cli
import yaml
import pipelinelib
from pipelinelib import logfmt, Src, update
from nodes import StrctXc, DwiXc, FsInDwiDirect, FreeSurferUsingMask, T1wMaskMabs, DwiMaskHcpBet, DwiEd, UkfDefault

BTHASH = '41353e8'
TQHASH = 'a8e354e'
UKFHASH = '999f14d'

# def makeCustomPipelines(caseid, pathsDict):
#     """Make one or more custom pipelines.  Uncomment this and it will be run,
#     instead of the standard PNL pipeline defined below."""
#     pipelines = []
#     # for ukfparams in [ukfparamsDefault, ukfparamsCustom]:
#     # for bthash in [BTHASH, 'e13c873']:
#     for dwikey in ['dwihcp', 'dwibuddi']:
#         pipeline = makeStandardPipeline(caseid, pathsDict, dwiKey=dwikey)
#         pipelines.append(pipeline)
#     return pipelines


def makeStandardPipeline(caseid, pathsDict, dwiKey='dwi', t1Key='t1', dwimaskKey='dwimask'):
    """Makes the PNL's standard pipeline. """

    pipeline = {}
    pipeline['t1'] = Src(caseid, t1Key)
    pipeline['dwi'] = Src(caseid, dwiKey)

    pipeline['t1xc'] = StrctXc(caseid, pipeline['t1'])
    # run DwiXc first as it's able to convert a DWI nifti to nrrd
    pipeline['dwixc'] = DwiXc(caseid, pipeline['dwi'], BTHASH)
    pipeline['dwied'] = DwiEd(caseid, pipeline['dwixc'], BTHASH)

    pipeline['dwimask'] = Src(
        caseid, dwimaskKey) if pathsDict.get(dwimaskKey) else DwiMaskHcpBet(
            caseid, pipeline['dwied'], BTHASH)

    pipeline['t1mask'] = Src(
        caseid, 't1mask') if pathsDict.get('t1mask') else T1wMaskMabs(
            caseid, pipeline['t1xc'], BTHASH)

    pipeline['fs'] = FreeSurferUsingMask(caseid, pipeline['t1xc'], pipeline['t1mask'])
    pipeline['fsindwi'] = FsInDwiDirect(
        caseid, pipeline['fs'], pipeline['dwied'], pipeline['dwimask'],
        BTHASH)

    pipeline['ukf'] = UkfDefault(caseid
                                 , pipeline['dwied']
                                 , pipeline['dwimask']
                                 , UKFHASH
                                 , BTHASH)
    return pipeline




class App(cli.Application):
    """Runs the PNL pipeline using the input paths in _paths.yml (Run 'pnlmake'
    first)"""

    want = cli.SwitchAttr(
        ['-w', '--want'], default='ukf', help='target node')

    def main(self, *caseids):

        if not local.path('_paths.yml').exists():
            print('Missing _paths.yml, run pnlmake first')
            sys.exit(1)

        with open('_paths.yml', 'r') as f:
            pathsDict = yaml.load(f)
            pipelinelib.INPUT_PATH_PATTERNS = pathsDict

        if not caseids:
            if not pathsDict.get('caseid'):
                print('Specify caseid(s) on command line, e.g. ./pnlrun 001')
                sys.exit(1)
            caseids = [pathsDict.get('caseid')]

        for caseid in caseids:
            # if makeCustomPipelines is uncommented, use it
            if 'makeCustomPipelines' in globals():
                pipelines = makeCustomPipelines(caseid, pathsDict)
                for pipeline in pipelines:
                    update(pipeline[self.want])
            else:
                # otherwise, run the standard PNL pipeline
                pipeline = makeStandardPipeline(caseid, pathsDict)
                update(pipeline[self.want])


if __name__ == '__main__':
    App.run()
